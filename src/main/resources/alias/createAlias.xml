<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~ WSO2 Inc. licenses this file to you under the Apache License,
  ~ Version 2.0 (the "License"); you may not use this file except
  ~ in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied. See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  -->
<template xmlns="http://ws.apache.org/ns/synapse" name="createAlias">
    <!-- uri request parameter-->
    <parameter name="functionName" description="Name of the Lambda function."/>
    <parameter name="apiVersionCreateAlias" description="API version used for CreateAlias method."/>
    <!-- uri body parameters-->
    <parameter name="createAliasDescription" description="The description of the alias."/>
    <parameter name="functionVersion" description="The version of the function."/>
    <parameter name="aliasName" description="The name of the alias."/>
    <parameter name="aliasAdditionalVersionWeights" description="The name of the second alias, and the percentage of
        traffic that's routed to it."/>
    <parameter name="responseVariable" description="The name of the variable to which the response should be stored."/>
    <parameter name="overwriteBody" description="Replace the Message Body in Message Context with the response of the operation."/>
    <sequence>
        <property name="uri.var.functionName" expression="$func:functionName"/>
        <property name="uri.var.apiVersion" expression="$func:apiVersionCreateAlias"/>
        <property name="payloadDescription" expression="$func:createAliasDescription"/>
        <property name="payloadFunctionVersion" expression="$func:functionVersion"/>
        <property name="payloadAliasName" expression="$func:aliasName"/>
        <property name="payloadAdditionalVersionWeights" expression="$func:aliasAdditionalVersionWeights"/>
        <property name="httpMethod" value="POST"/>
        <property name="uri.var.uriRemainder" expression="fn:concat('/', $ctx:uri.var.apiVersion, '/functions/',
            $ctx:uri.var.functionName, '/aliases')"/>
        <class name="org.wso2.carbon.esb.connector.auth.AmazonLambdaAuthConnector"/>
        <header name="Authorization" scope="transport" expression="$ctx:authorizationHeader"/>
        <header name="X-Amz-Date" scope="transport" expression="$ctx:x-amz-date"/>
        <payloadFactory media-type="json">
            <format>
                $1
            </format>
            <args>
                <arg expression="$ctx:requestPayload"/>
            </args>
        </payloadFactory>
        <filter source="$ctx:amazonLambdaBlocking" regex="true">
            <then>
                <call blocking="true">
                    <endpoint>
                        <http method="POST" uri-template="{uri.var.apiUrl}{+uri.var.uriRemainder}"/>
                    </endpoint>
                </call>
            </then>
            <else>
                <call>
                    <endpoint>
                        <http method="POST" uri-template="{uri.var.apiUrl}{+uri.var.uriRemainder}"/>
                    </endpoint>
                </call>
            </else>
        </filter>
    </sequence>
</template>
