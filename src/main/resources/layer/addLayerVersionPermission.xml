<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~ WSO2 Inc. licenses this file to you under the Apache License,
  ~ Version 2.0 (the "License"); you may not use this file except
  ~ in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied. See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  -->
<template xmlns="http://ws.apache.org/ns/synapse" name="addLayerVersionPermission">
    <parameter name="layerName" description="The name or Amazon Resource Name(ARN) of the layer."/>
    <parameter name="apiVersionAddLayerVersionPermission" description="API version used for AddLayerVersionPermission
        method."/>
    <parameter name="layerVersionNumber" description="version number"/>
    <parameter name="layerRevisionId" description="to update the policy if the revision ID matcheds the ID specified"/>
    <parameter name="layerAction" description="the api action that grants access to the layer"/>
    <parameter name="layerOrganizationId" description="organization id (optional)"/>
    <parameter name="layerPrincipal" description="An account ID, or * to grant permission to all AWS accounts."/>
    <parameter name="layerStatementId" description="An identifier that distinguishes the policy from others on the same
        layer version."/>
    <parameter name="responseVariable" description="The name of the variable to which the response should be stored."/>
    <parameter name="overwriteBody" description="Replace the Message Body in Message Context with the response of the operation."/>
    <sequence>
        <property name="uri.var.layerName" expression="$func:layerName"/>
        <property name="uri.var.apiVersion" expression="$func:apiVersionAddLayerVersionPermission"/>
        <property name="uri.var.versionNumber" expression="$func:layerVersionNumber"/>
        <property name="uri.var.revisionId" expression="$func:layerRevisionId"/>
        <property name="payloadAction" expression="$func:layerAction"/>
        <property name="payloadOrganizationId" expression="$func:layerOrganizationId"/>
        <property name="payloadPrincipal" expression="$func:layerPrincipal"/>
        <property name="payloadStatementId" expression="$func:layerStatementId"/>
        <property name="httpMethod" value="POST"/>
        <property name="uri.var.uriRemainder" expression="fn:concat('/', $ctx:uri.var.apiVersion, '/layers/',
            $ctx:uri.var.layerName, '/versions/', $ctx:uri.var.versionNumber, '/policy')"/>
        <script language="js">
            <![CDATA[
                var queryParameter = '';
                var revisionId = mc.getProperty('uri.var.revisionId');
                if (revisionId != null && revisionId != "") {
                    queryParameter = "?RevisionId=" + encodeURIComponent(revisionId);
                }
                mc.setProperty('uri.var.queryParameter', queryParameter.toString());
            ]]>
        </script>
        <class name="org.wso2.carbon.esb.connector.auth.AmazonLambdaAuthConnector"/>
        <header name="Authorization" scope="transport" expression="$ctx:authorizationHeader"/>
        <header name="X-Amz-Date" scope="transport" expression="$ctx:x-amz-date"/>
        <payloadFactory media-type="json">
            <format>
                $1
            </format>
            <args>
                <arg expression="$ctx:requestPayload"/>
            </args>
        </payloadFactory>
        <filter source="$ctx:amazonLambdaBlocking" regex="true">
            <then>
                <call blocking="true">
                    <endpoint>
                        <http method="POST"
                              uri-template="{uri.var.apiUrl}{+uri.var.uriRemainder}{+uri.var.queryParameter}"/>
                    </endpoint>
                </call>
            </then>
            <else>
                <call>
                    <endpoint>
                        <http method="POST"
                              uri-template="{uri.var.apiUrl}{+uri.var.uriRemainder}{+uri.var.queryParameter}"/>
                    </endpoint>
                </call>
            </else>
        </filter>
    </sequence>
</template>
